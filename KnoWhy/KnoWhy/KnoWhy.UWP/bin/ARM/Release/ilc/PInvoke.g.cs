#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 32-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The '__Interop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace __Interop
{
	/// <summary>
	/// P/Invoke class for module 'realm-wrappers'
	/// </summary>
	public unsafe static partial class realm_wrappers
	{
		// Signature, register_callbacks, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_NativeCommon_NotifyRealmCallback__Realm__Realms__NativeCommon_NotifyRealmCallback__Realm, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_NativeCommon_GetNativeSchemaCallback__Realm__Realms__NativeCommon_GetNativeSchemaCallback__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.NativeCommon", "register_callbacks")]
		public static void register_callbacks(
					global::Realms.NativeCommon_NotifyRealmCallback__Realm notifyRealmCallback, 
					global::Realms.NativeCommon_GetNativeSchemaCallback__Realm nativeSchemaCallback)
		{
			// Setup
			void* unsafe_notifyRealmCallback = default(void*);
			void* unsafe_nativeSchemaCallback = default(void*);
			try
			{
				// Marshalling
				unsafe_notifyRealmCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.NativeCommon+NotifyRealmCallback,Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"), 
									notifyRealmCallback
								);
				unsafe_nativeSchemaCallback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.NativeCommon+GetNativeSchemaCallback,Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"), 
									nativeSchemaCallback
								);
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.register_callbacks(
									unsafe_notifyRealmCallback, 
									unsafe_nativeSchemaCallback
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(notifyRealmCallback);
				global::System.GC.KeepAlive(nativeSchemaCallback);
			}
		}

		// Signature, delete_pointer, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] void___ptrvoid *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.NativeCommon", "delete_pointer")]
		public static void delete_pointer(void* pointer)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.delete_pointer(((void*)pointer));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, reset_for_testing, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.NativeCommon", "reset_for_testing")]
		public static void reset_for_testing()
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.reset_for_testing();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, install_eventloop_callbacks, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_SynchronizationContextEventLoopSignal_get_eventloop__Realm__Realms__SynchronizationContextEventLoopSignal_get_eventloop__Realm, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_SynchronizationContextEventLoopSignal_post_on_event_loop__Realm__Realms__SynchronizationContextEventLoopSignal_post_on_event_loop__Realm, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_SynchronizationContextEventLoopSignal_release_eventloop__Realm__Realms__SynchronizationContextEventLoopSignal_release_eventloop__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SynchronizationContextEventLoopSignal", "install_eventloop_callbacks")]
		public static void install_eventloop_callbacks(
					global::Realms.SynchronizationContextEventLoopSignal_get_eventloop__Realm get, 
					global::Realms.SynchronizationContextEventLoopSignal_post_on_event_loop__Realm post, 
					global::Realms.SynchronizationContextEventLoopSignal_release_eventloop__Realm release)
		{
			// Setup
			void* unsafe_get = default(void*);
			void* unsafe_post = default(void*);
			void* unsafe_release = default(void*);
			try
			{
				// Marshalling
				unsafe_get = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.SynchronizationContextEventLoopSignal+get_eventloop,Realm, Version=2.0.0.0, Culture=neutral, PublicKeyTok" +
											"en=null"), 
									get
								);
				unsafe_post = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.SynchronizationContextEventLoopSignal+post_on_event_loop,Realm, Version=2.0.0.0, Culture=neutral, PublicK" +
											"eyToken=null"), 
									post
								);
				unsafe_release = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.SynchronizationContextEventLoopSignal+release_eventloop,Realm, Version=2.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									release
								);
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.install_eventloop_callbacks(
									unsafe_get, 
									unsafe_post, 
									unsafe_release
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(get);
				global::System.GC.KeepAlive(post);
				global::System.GC.KeepAlive(release);
			}
		}

		// Signature, add_object, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "add_object")]
		public static void add_object(
					global::Realms.ListHandle__Realm listHandle, 
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			objectHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.add_object(
								listHandle.DangerousGetHandle(), 
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				objectHandle.DangerousRelease();
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, add_primitive, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "add_primitive")]
		public static void add_primitive(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.add_primitive(
								listHandle.DangerousGetHandle(), 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, add_string, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "add_string")]
		public static void add_string(
					global::Realms.ListHandle__Realm listHandle, 
					string value, 
					global::System.IntPtr valueLength, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.add_string(
									listHandle.DangerousGetHandle(), 
									unsafe_value, 
									valueLength, 
									unsafe_has_value, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, add_binary, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "add_binary")]
		public static void add_binary(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.add_binary(
								listHandle.DangerousGetHandle(), 
								buffer, 
								bufferLength, 
								unsafe_has_value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, insert_object, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "insert_object")]
		public static void insert_object(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr targetIndex, 
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			objectHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.insert_object(
								listHandle.DangerousGetHandle(), 
								targetIndex, 
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				objectHandle.DangerousRelease();
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, insert_primitive, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "insert_primitive")]
		public static void insert_primitive(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr targetIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.insert_primitive(
								listHandle.DangerousGetHandle(), 
								targetIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, insert_string, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "insert_string")]
		public static void insert_string(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr targetIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.insert_string(
									listHandle.DangerousGetHandle(), 
									targetIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_has_value, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, insert_binary, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "insert_binary")]
		public static void insert_binary(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr targetIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.insert_binary(
								listHandle.DangerousGetHandle(), 
								targetIndex, 
								buffer, 
								bufferLength, 
								unsafe_has_value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, get_object, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_object")]
		public static global::System.IntPtr get_object(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr link_ndx, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_object(
								listHandle.DangerousGetHandle(), 
								link_ndx, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_primitive, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.InvalidUnsafeTypeMarshaller] Realms_Native_PrimitiveValue__Realm__P__void *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_primitive")]
		public static void get_primitive(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr link_ndx, 
					ref global::Realms.Native.PrimitiveValue__Realm__P value, 
					out global::Realms.NativeException__Realm ex)
		{
			throw new global::System.Runtime.InteropServices.MarshalDirectiveException(global::Mcg.System.SR.Format(
									global::Mcg.System.SR.Excep_InvalidMarshalAs_Param, 
									"value"
								));
		}

		// Signature, get_string, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_string")]
		public static global::System.IntPtr get_string(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					out bool isNull, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_isNull;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_string(
								listHandle.DangerousGetHandle(), 
								link_ndx, 
								buffer, 
								bufsize, 
								&(unsafe_isNull), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			isNull = unsafe_isNull != 0;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_binary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_binary")]
		public static global::System.IntPtr get_binary(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					out bool isNull, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_isNull;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_binary(
								listHandle.DangerousGetHandle(), 
								link_ndx, 
								buffer, 
								bufsize, 
								&(unsafe_isNull), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			isNull = unsafe_isNull != 0;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, find_object, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "find_object")]
		public static global::System.IntPtr find_object(
					global::Realms.ListHandle__Realm listHandle, 
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			objectHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.find_object(
								listHandle.DangerousGetHandle(), 
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				objectHandle.DangerousRelease();
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, find_primitive, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "find_primitive")]
		public static global::System.IntPtr find_primitive(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.find_primitive(
								listHandle.DangerousGetHandle(), 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, find_string, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "find_string")]
		public static global::System.IntPtr find_string(
					global::Realms.ListHandle__Realm listHandle, 
					string value, 
					global::System.IntPtr valueLen, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.find_string(
									listHandle.DangerousGetHandle(), 
									unsafe_value, 
									valueLen, 
									unsafe_has_value, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, find_binary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "find_binary")]
		public static global::System.IntPtr find_binary(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					bool has_value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_has_value;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.find_binary(
								listHandle.DangerousGetHandle(), 
								buffer, 
								bufsize, 
								unsafe_has_value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, erase, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "erase")]
		public static void erase(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr rowIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.erase(
								listHandle.DangerousGetHandle(), 
								rowIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "clear")]
		public static void clear(
					global::Realms.ListHandle__Realm listHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.clear(
								listHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
		}

		// Signature, size, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "size")]
		public static global::System.IntPtr size(
					global::Realms.ListHandle__Realm listHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.size(
								listHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, destroy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "destroy")]
		public static void destroy(global::System.IntPtr listInternalHandle)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy(listInternalHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, add_notification_callback, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm__Realms__NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "add_notification_callback")]
		public static global::System.IntPtr add_notification_callback(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr managedListHandle, 
					global::Realms.NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm callback, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				listHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.NotifiableObjectHandleBase+NotificationCallbackDelegate,Realm, Version=2.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.add_notification_callback(
									listHandle.DangerousGetHandle(), 
									managedListHandle, 
									unsafe_callback, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
				if (addRefed)
					listHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, move, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "move")]
		public static global::System.IntPtr move(
					global::Realms.ListHandle__Realm listHandle, 
					global::System.IntPtr sourceIndex, 
					global::System.IntPtr targetIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.move(
								listHandle.DangerousGetHandle(), 
								sourceIndex, 
								targetIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_is_valid, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_is_valid")]
		public static bool get_is_valid(
					global::Realms.ListHandle__Realm listHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_is_valid(
								listHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			__value = unsafe___value != 0;
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, get_thread_safe_reference, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "get_thread_safe_reference")]
		public static global::System.IntPtr get_thread_safe_reference(
					global::Realms.ListHandle__Realm listHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			listHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_thread_safe_reference(
								listHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				listHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, snapshot, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ListHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ListHandle+NativeMethods", "snapshot")]
		public static global::System.IntPtr snapshot(
					global::Realms.ListHandle__Realm list, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			list.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.snapshot(
								list.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				list.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_is_valid__0, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_is_valid")]
		public static bool get_is_valid__0(
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_is_valid__0(
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			__value = unsafe___value != 0;
			ex = unsafe_ex;
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, get_row_index, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_row_index")]
		public static global::System.IntPtr get_row_index(
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_row_index(
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, destroy__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "destroy")]
		public static void destroy__0(global::System.IntPtr objectHandle)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy__0(objectHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, set_timestamp_ticks, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_timestamp_ticks")]
		public static void set_timestamp_ticks(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_timestamp_ticks(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_timestamp_ticks, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_timestamp_ticks")]
		public static long get_timestamp_ticks(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			long unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_timestamp_ticks(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_nullable_timestamp_ticks, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_nullable_timestamp_ticks")]
		public static global::System.IntPtr get_nullable_timestamp_ticks(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out long retVal, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			long unsafe_retVal;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_nullable_timestamp_ticks(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_retVal), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			retVal = unsafe_retVal;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_string, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_string")]
		public static void set_string(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.set_string(
									handle.DangerousGetHandle(), 
									propertyIndex, 
									unsafe_value, 
									valueLen, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_string__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_string")]
		public static global::System.IntPtr get_string__0(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					out bool isNull, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_isNull;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_string__0(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								buffer, 
								bufsize, 
								&(unsafe_isNull), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			isNull = unsafe_isNull != 0;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_link, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_link")]
		public static void set_link(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.ObjectHandle__Realm targetHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			targetHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_link(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								targetHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				targetHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_link, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_link")]
		public static global::System.IntPtr get_link(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_link(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, clear_link, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "clear_link")]
		public static void clear_link(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.clear_link(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_list, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_list")]
		public static global::System.IntPtr get_list(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_list(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_null, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_null")]
		public static void set_null(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_null(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, set_bool, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_bool")]
		public static void set_bool(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_bool(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_bool, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_bool")]
		public static global::System.IntPtr get_bool(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_bool(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_nullable_bool, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_nullable_bool")]
		public static global::System.IntPtr get_nullable_bool(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::System.IntPtr retVal, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_retVal;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_nullable_bool(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_retVal), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			retVal = unsafe_retVal;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_int64, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_int64")]
		public static void set_int64(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_int64(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, add_int64, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "add_int64")]
		public static void add_int64(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.add_int64(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_int64")]
		public static long get_int64(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			long unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_int64(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_nullable_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_nullable_int64")]
		public static global::System.IntPtr get_nullable_int64(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out long retVal, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			long unsafe_retVal;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_nullable_int64(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_retVal), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			retVal = unsafe_retVal;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_float")]
		public static void set_float(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_float(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_float, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_float")]
		public static float get_float(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			float unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_float(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_nullable_float, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_nullable_float")]
		public static global::System.IntPtr get_nullable_float(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out float retVal, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			float unsafe_retVal;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_nullable_float(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_retVal), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			retVal = unsafe_retVal;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_double")]
		public static void set_double(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_double(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, get_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_double")]
		public static double get_double(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			double unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_double(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_nullable_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_nullable_double")]
		public static global::System.IntPtr get_nullable_double(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					out double retVal, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			double unsafe_retVal;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_nullable_double(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_retVal), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			retVal = unsafe_retVal;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, set_binary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "set_binary")]
		public static global::System.IntPtr set_binary(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.set_binary(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								buffer, 
								bufferLength, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_binary__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_binary")]
		public static global::System.IntPtr get_binary__0(
					global::Realms.ObjectHandle__Realm handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					out bool is_null, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_is_null;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_binary__0(
								handle.DangerousGetHandle(), 
								propertyIndex, 
								buffer, 
								bufferLength, 
								&(unsafe_is_null), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			is_null = unsafe_is_null != 0;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, remove_row, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_RealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "remove_row")]
		public static void remove_row(
					global::Realms.ObjectHandle__Realm handle, 
					global::Realms.RealmHandle__Realm realmHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.remove_row(
								handle.DangerousGetHandle(), 
								realmHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
		}

		// Signature, equals_object, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "equals_object")]
		public static bool equals_object(
					global::Realms.ObjectHandle__Realm handle, 
					global::Realms.ObjectHandle__Realm otherHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			otherHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.equals_object(
								handle.DangerousGetHandle(), 
								otherHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			__value = unsafe___value != 0;
			ex = unsafe_ex;
			if (addRefed_1)
				otherHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, get_backlinks, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_backlinks")]
		public static global::System.IntPtr get_backlinks(
					global::Realms.ObjectHandle__Realm objectHandle, 
					global::System.IntPtr propertyIndex, 
					out global::Realms.NativeException__Realm nativeException)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_nativeException;
			global::System.IntPtr unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_backlinks(
								objectHandle.DangerousGetHandle(), 
								propertyIndex, 
								&(unsafe_nativeException)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			nativeException = unsafe_nativeException;
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_backlinks_for_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_backlinks_for_type")]
		public static global::System.IntPtr get_backlinks_for_type(
					global::Realms.ObjectHandle__Realm objectHandle, 
					string type, 
					global::System.IntPtr typeLen, 
					string property, 
					global::System.IntPtr propertyLen, 
					out global::Realms.NativeException__Realm nativeException)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_type = default(ushort*);
			ushort* unsafe_property = default(ushort*);
			global::Realms.NativeException__Realm unsafe_nativeException;
			global::System.IntPtr unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_type = type)
			{
				unsafe_type = (ushort*)pinned_type;
				fixed (char* pinned_property = property)
				{
					unsafe_property = (ushort*)pinned_property;
					// Call to native method
					unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_backlinks_for_type(
										objectHandle.DangerousGetHandle(), 
										unsafe_type, 
										typeLen, 
										unsafe_property, 
										propertyLen, 
										&(unsafe_nativeException)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					nativeException = unsafe_nativeException;
				}
			}
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_thread_safe_reference__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_thread_safe_reference")]
		public static global::System.IntPtr get_thread_safe_reference__0(
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_thread_safe_reference__0(
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, add_notification_callback__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm__Realms__NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "add_notification_callback")]
		public static global::System.IntPtr add_notification_callback__0(
					global::Realms.ObjectHandle__Realm objectHandle, 
					global::System.IntPtr managedObjectHandle, 
					global::Realms.NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm callback, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				objectHandle.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.NotifiableObjectHandleBase+NotificationCallbackDelegate,Realm, Version=2.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.add_notification_callback__0(
									objectHandle.DangerousGetHandle(), 
									managedObjectHandle, 
									unsafe_callback, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
				if (addRefed)
					objectHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, get_backlink_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ObjectHandle+NativeMethods", "get_backlink_count")]
		public static global::System.IntPtr get_backlink_count(
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			objectHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_backlink_count(
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				objectHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, binary_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "binary_equal")]
		public static void binary_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.binary_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								buffer, 
								bufferLength, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, binary_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "binary_not_equal")]
		public static void binary_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.binary_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								buffer, 
								bufferLength, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_contains, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_contains")]
		public static void string_contains(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_contains(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_starts_with, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_starts_with")]
		public static void string_starts_with(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_starts_with(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_ends_with, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_ends_with")]
		public static void string_ends_with(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_ends_with(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_equal")]
		public static void string_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_equal(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_not_equal")]
		public static void string_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_not_equal(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, string_like, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "string_like")]
		public static void string_like(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					string value, 
					global::System.IntPtr valueLen, 
					bool caseSensitive, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_caseSensitive;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_caseSensitive = (caseSensitive ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				global::__Interop.realm_wrappers_PInvokes.string_like(
									queryPtr.DangerousGetHandle(), 
									columnIndex, 
									unsafe_value, 
									valueLen, 
									unsafe_caseSensitive, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, bool_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "bool_equal")]
		public static void bool_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.bool_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, bool_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "bool_not_equal")]
		public static void bool_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.bool_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_equal")]
		public static void int_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_not_equal")]
		public static void int_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_less, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_less")]
		public static void int_less(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_less(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_less_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_less_equal")]
		public static void int_less_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_less_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_greater, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_greater")]
		public static void int_greater(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_greater(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, int_greater_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "int_greater_equal")]
		public static void int_greater_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.int_greater_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_equal")]
		public static void long_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_not_equal")]
		public static void long_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_less, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_less")]
		public static void long_less(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_less(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_less_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_less_equal")]
		public static void long_less_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_less_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_greater, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_greater")]
		public static void long_greater(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_greater(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, long_greater_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "long_greater_equal")]
		public static void long_greater_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.long_greater_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_equal")]
		public static void float_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_not_equal")]
		public static void float_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_less, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_less")]
		public static void float_less(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_less(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_less_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_less_equal")]
		public static void float_less_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_less_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_greater, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_greater")]
		public static void float_greater(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_greater(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, float_greater_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "float_greater_equal")]
		public static void float_greater_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.float_greater_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_equal")]
		public static void double_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_not_equal")]
		public static void double_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_less, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_less")]
		public static void double_less(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_less(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_less_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_less_equal")]
		public static void double_less_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_less_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_greater, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_greater")]
		public static void double_greater(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_greater(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, double_greater_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "double_greater_equal")]
		public static void double_greater_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.double_greater_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_equal")]
		public static void timestamp_ticks_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_not_equal")]
		public static void timestamp_ticks_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_less, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_less")]
		public static void timestamp_ticks_less(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_less(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_less_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_less_equal")]
		public static void timestamp_ticks_less_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_less_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_greater, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_greater")]
		public static void timestamp_ticks_greater(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_greater(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, timestamp_ticks_greater_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "timestamp_ticks_greater_equal")]
		public static void timestamp_ticks_greater_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.timestamp_ticks_greater_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, query_object_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "query_object_equal")]
		public static void query_object_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					global::Realms.ObjectHandle__Realm objectHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			objectHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.query_object_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								objectHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				objectHandle.DangerousRelease();
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, null_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "null_equal")]
		public static void null_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.null_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, null_not_equal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "null_not_equal")]
		public static void null_not_equal(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::System.IntPtr columnIndex, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.null_not_equal(
								queryPtr.DangerousGetHandle(), 
								columnIndex, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
		}

		// Signature, findDirect, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "findDirect")]
		public static global::System.IntPtr findDirect(
					global::Realms.QueryHandle__Realm queryHandle, 
					global::System.IntPtr beginAtIndex, 
					global::Realms.SharedRealmHandle__Realm realmHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.findDirect(
								queryHandle.DangerousGetHandle(), 
								beginAtIndex, 
								realmHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, findNext, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ObjectHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "findNext")]
		public static global::System.IntPtr findNext(
					global::Realms.QueryHandle__Realm queryHandle, 
					global::Realms.ObjectHandle__Realm previousObject, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			previousObject.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.findNext(
								queryHandle.DangerousGetHandle(), 
								previousObject.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				previousObject.DangerousRelease();
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_column_index, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "get_column_index")]
		public static global::System.IntPtr get_column_index(
					global::Realms.QueryHandle__Realm queryPtr, 
					string columnName, 
					global::System.IntPtr columnNameLen, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_columnName = default(ushort*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			fixed (char* pinned_columnName = columnName)
			{
				unsafe_columnName = (ushort*)pinned_columnName;
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_column_index(
									queryPtr.DangerousGetHandle(), 
									unsafe_columnName, 
									columnNameLen, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, not, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "not")]
		public static void not(
					global::Realms.QueryHandle__Realm queryHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.not(
								queryHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
		}

		// Signature, group_begin, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "group_begin")]
		public static void group_begin(
					global::Realms.QueryHandle__Realm queryHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.group_begin(
								queryHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
		}

		// Signature, group_end, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "group_end")]
		public static void group_end(
					global::Realms.QueryHandle__Realm queryHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.group_end(
								queryHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
		}

		// Signature, or, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "or")]
		public static void or(
					global::Realms.QueryHandle__Realm queryHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			queryHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.or(
								queryHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				queryHandle.DangerousRelease();
			// Return
		}

		// Signature, destroy__1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "destroy")]
		public static void destroy__1(global::System.IntPtr queryHandle)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy__1(queryHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "count")]
		public static global::System.IntPtr count(
					global::Realms.QueryHandle__Realm QueryHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			QueryHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.count(
								QueryHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				QueryHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_results, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "create_results")]
		public static global::System.IntPtr create_results(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			queryPtr.DangerousAddRef(ref addRefed);
			sharedRealm.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_results(
								queryPtr.DangerousGetHandle(), 
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				sharedRealm.DangerousRelease();
			if (addRefed)
				queryPtr.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_sorted_results, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_QueryHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_Realms_Native_SortDescriptorBuilder_Clause_Marshalable__Realm__Realms_Native__SortDescriptorBuilder_Clause_Marshalable__Realm *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.QueryHandle+NativeMethods", "create_sorted_results")]
		public static global::System.IntPtr create_sorted_results(
					global::Realms.QueryHandle__Realm queryPtr, 
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.TableHandle__Realm tablePtr, 
					global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm[] sortClauses, 
					global::System.IntPtr clauseCount, 
					global::System.IntPtr[] flattenedPropertyIndices, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			bool addRefed_2 = false;
			global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType* unsafe_sortClauses = default(global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType*);
			global::System.IntPtr* unsafe_flattenedPropertyIndices;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				queryPtr.DangerousAddRef(ref addRefed);
				sharedRealm.DangerousAddRef(ref addRefed_1);
				tablePtr.DangerousAddRef(ref addRefed_2);
				if (sortClauses == null)
					unsafe_sortClauses = null;
				else
				{
					if (sortClauses != null)
						unsafe_sortClauses = (global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(sortClauses.Length * sizeof(global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType))));
					if (sortClauses != null)
						for (uint mcgIdx = 0; (mcgIdx < sortClauses.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SortDescriptorBuilder_Clause_Marshalable__Realm__Realms_Native__SortDescriptorBuilder_Clause_Marshalable__Realm sortClauses
							global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.Marshal__SafeToUnsafe(
												ref sortClauses[mcgIdx], 
												out unsafe_sortClauses[mcgIdx]
											);
						}
				}
				fixed (global::System.IntPtr* pinned_flattenedPropertyIndices = global::__Interop.McgHelpers.GetArrayForCompat(flattenedPropertyIndices))
				{
					unsafe_flattenedPropertyIndices = (global::System.IntPtr*)pinned_flattenedPropertyIndices;
					// Call to native method
					unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_sorted_results(
										queryPtr.DangerousGetHandle(), 
										sharedRealm.DangerousGetHandle(), 
										tablePtr.DangerousGetHandle(), 
										unsafe_sortClauses, 
										clauseCount, 
										unsafe_flattenedPropertyIndices, 
										&(unsafe_ex)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					ex = unsafe_ex;
				}
				if (addRefed_2)
					tablePtr.DangerousRelease();
				if (addRefed_1)
					sharedRealm.DangerousRelease();
				if (addRefed)
					queryPtr.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_sortClauses);
			}
		}

		// Signature, is_same_internal_results, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "is_same_internal_results")]
		public static global::System.IntPtr is_same_internal_results(
					global::Realms.ResultsHandle__Realm lhs, 
					global::Realms.ResultsHandle__Realm rhs, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			lhs.DangerousAddRef(ref addRefed);
			rhs.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.is_same_internal_results(
								lhs.DangerousGetHandle(), 
								rhs.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				rhs.DangerousRelease();
			if (addRefed)
				lhs.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, destroy__2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "destroy")]
		public static void destroy__2(global::System.IntPtr resultsHandle)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy__2(resultsHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, get_object__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_object")]
		public static global::System.IntPtr get_object__0(
					global::Realms.ResultsHandle__Realm results, 
					global::System.IntPtr index, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_object__0(
								results.DangerousGetHandle(), 
								index, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_primitive__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.InvalidUnsafeTypeMarshaller] Realms_Native_PrimitiveValue__Realm__P__void *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_primitive")]
		public static void get_primitive__0(
					global::Realms.ResultsHandle__Realm results, 
					global::System.IntPtr link_ndx, 
					ref global::Realms.Native.PrimitiveValue__Realm__P value, 
					out global::Realms.NativeException__Realm ex)
		{
			throw new global::System.Runtime.InteropServices.MarshalDirectiveException(global::Mcg.System.SR.Format(
									global::Mcg.System.SR.Excep_InvalidMarshalAs_Param, 
									"value"
								));
		}

		// Signature, get_string__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_string")]
		public static global::System.IntPtr get_string__1(
					global::Realms.ResultsHandle__Realm results, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					out bool isNull, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_isNull;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_string__1(
								results.DangerousGetHandle(), 
								link_ndx, 
								buffer, 
								bufsize, 
								&(unsafe_isNull), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			isNull = unsafe_isNull != 0;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_binary__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_binary")]
		public static global::System.IntPtr get_binary__1(
					global::Realms.ResultsHandle__Realm results, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					out bool isNull, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			sbyte unsafe_isNull;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_binary__1(
								results.DangerousGetHandle(), 
								link_ndx, 
								buffer, 
								bufsize, 
								&(unsafe_isNull), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			isNull = unsafe_isNull != 0;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, count__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "count")]
		public static global::System.IntPtr count__0(
					global::Realms.ResultsHandle__Realm results, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.count__0(
								results.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, clear__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "clear")]
		public static void clear__0(
					global::Realms.ResultsHandle__Realm results, 
					global::Realms.SharedRealmHandle__Realm realmHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.clear__0(
								results.DangerousGetHandle(), 
								realmHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				results.DangerousRelease();
			// Return
		}

		// Signature, add_notification_callback__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Realms_NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm__Realms__NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "add_notification_callback")]
		public static global::System.IntPtr add_notification_callback__1(
					global::Realms.ResultsHandle__Realm results, 
					global::System.IntPtr managedResultsHandle, 
					global::Realms.NotifiableObjectHandleBase_NotificationCallbackDelegate__Realm callback, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_callback = default(void*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				results.DangerousAddRef(ref addRefed);
				unsafe_callback = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Realms.NotifiableObjectHandleBase+NotificationCallbackDelegate,Realm, Version=2.0.0.0, Culture=neutral, PublicKe" +
											"yToken=null"), 
									callback
								);
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.add_notification_callback__1(
									results.DangerousGetHandle(), 
									managedResultsHandle, 
									unsafe_callback, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
				if (addRefed)
					results.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(callback);
			}
		}

		// Signature, get_query, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_query")]
		public static global::System.IntPtr get_query(
					global::Realms.ResultsHandle__Realm results, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_query(
								results.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_is_valid__1, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_is_valid")]
		public static bool get_is_valid__1(
					global::Realms.ResultsHandle__Realm results, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_is_valid__1(
								results.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			__value = unsafe___value != 0;
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, get_thread_safe_reference__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "get_thread_safe_reference")]
		public static global::System.IntPtr get_thread_safe_reference__1(
					global::Realms.ResultsHandle__Realm results, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_thread_safe_reference__1(
								results.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, snapshot__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ResultsHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ResultsHandle+NativeMethods", "snapshot")]
		public static global::System.IntPtr snapshot__0(
					global::Realms.ResultsHandle__Realm results, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			results.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.snapshot__0(
								results.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				results.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.StructMarshaller] Realms_Native_Configuration__Realm__Realms_Native__Configuration__Realm, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_Realms_Native_SchemaObject__Realm__Realms_Native__SchemaObject__Realm *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_Realms_Native_SchemaProperty__Realm__Realms_Native__SchemaProperty__Realm *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "open")]
		public static global::System.IntPtr open(
					global::Realms.Native.Configuration__Realm configuration, 
					global::Realms.Native.SchemaObject__Realm[] objects, 
					int objects_length, 
					global::Realms.Native.SchemaProperty__Realm[] properties, 
					byte[] encryptionKey, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			global::Realms.Native.Configuration__Realm__Impl.UnsafeType unsafe_configuration = default(global::Realms.Native.Configuration__Realm__Impl.UnsafeType);
			global::Realms.Native.SchemaObject__Realm__Impl.UnsafeType* unsafe_objects = default(global::Realms.Native.SchemaObject__Realm__Impl.UnsafeType*);
			global::Realms.Native.SchemaProperty__Realm__Impl.UnsafeType* unsafe_properties = default(global::Realms.Native.SchemaProperty__Realm__Impl.UnsafeType*);
			byte* unsafe_encryptionKey;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				global::Realms.Native.Configuration__Realm__Impl.Marshal__SafeToUnsafe(
									ref configuration, 
									out unsafe_configuration
								);
				if (objects == null)
					unsafe_objects = null;
				else
				{
					if (objects != null)
						unsafe_objects = (global::Realms.Native.SchemaObject__Realm__Impl.UnsafeType*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(objects.Length * sizeof(global::Realms.Native.SchemaObject__Realm__Impl.UnsafeType))));
					if (objects != null)
						for (uint mcgIdx = 0; (mcgIdx < objects.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SchemaObject__Realm__Realms_Native__SchemaObject__Realm objects
							global::Realms.Native.SchemaObject__Realm__Impl.Marshal__SafeToUnsafe(
												ref objects[mcgIdx], 
												out unsafe_objects[mcgIdx]
											);
						}
				}
				if (properties == null)
					unsafe_properties = null;
				else
				{
					if (properties != null)
						unsafe_properties = (global::Realms.Native.SchemaProperty__Realm__Impl.UnsafeType*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(properties.Length * sizeof(global::Realms.Native.SchemaProperty__Realm__Impl.UnsafeType))));
					if (properties != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < properties.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SchemaProperty__Realm__Realms_Native__SchemaProperty__Realm properties
							global::Realms.Native.SchemaProperty__Realm__Impl.Marshal__SafeToUnsafe(
												ref properties[mcgIdx_2], 
												out unsafe_properties[mcgIdx_2]
											);
						}
				}
				fixed (byte* pinned_encryptionKey = global::__Interop.McgHelpers.GetArrayForCompat(encryptionKey))
				{
					unsafe_encryptionKey = (byte*)pinned_encryptionKey;
					// Call to native method
					unsafe___value = global::__Interop.realm_wrappers_PInvokes.open(
										unsafe_configuration, 
										unsafe_objects, 
										objects_length, 
										unsafe_properties, 
										unsafe_encryptionKey, 
										&(unsafe_ex)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					ex = unsafe_ex;
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::Realms.Native.Configuration__Realm__Impl.Cleanup__Unsafe(ref unsafe_configuration);
				if (unsafe_objects != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < objects.Length); mcgIdx_1++)
					{
						// [fwd] [in] [out] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SchemaObject__Realm__Realms_Native__SchemaObject__Realm objects
						global::Realms.Native.SchemaObject__Realm__Impl.Cleanup__Unsafe(ref unsafe_objects[mcgIdx_1]);
					}
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_objects);
				if (unsafe_properties != null)
					for (uint mcgIdx_3 = 0; (mcgIdx_3 < properties.Length); mcgIdx_3++)
					{
						// [fwd] [in] [out] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SchemaProperty__Realm__Realms_Native__SchemaProperty__Realm properties
						global::Realms.Native.SchemaProperty__Realm__Impl.Cleanup__Unsafe(ref unsafe_properties[mcgIdx_3]);
					}
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_properties);
			}
		}

		// Signature, set_managed_state_handle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "set_managed_state_handle")]
		public static void set_managed_state_handle(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::System.IntPtr managedStateHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.set_managed_state_handle(
								sharedRealm.DangerousGetHandle(), 
								managedStateHandle, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, get_managed_state_handle, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "get_managed_state_handle")]
		public static global::System.IntPtr get_managed_state_handle(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_managed_state_handle(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, destroy__3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "destroy")]
		public static void destroy__3(global::System.IntPtr sharedRealm)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy__3(sharedRealm);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, close_realm, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "close_realm")]
		public static void close_realm(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.close_realm(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, begin_transaction, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "begin_transaction")]
		public static void begin_transaction(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.begin_transaction(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, commit_transaction, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "commit_transaction")]
		public static void commit_transaction(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.commit_transaction(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, cancel_transaction, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "cancel_transaction")]
		public static void cancel_transaction(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.cancel_transaction(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, is_in_transaction, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "is_in_transaction")]
		public static global::System.IntPtr is_in_transaction(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.is_in_transaction(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, refresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "refresh")]
		public static global::System.IntPtr refresh(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.refresh(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_table, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "get_table")]
		public static global::System.IntPtr get_table(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					string tableName, 
					global::System.IntPtr tableNameLength, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_tableName = default(ushort*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			fixed (char* pinned_tableName = tableName)
			{
				unsafe_tableName = (ushort*)pinned_tableName;
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_table(
									sharedRealm.DangerousGetHandle(), 
									unsafe_tableName, 
									tableNameLength, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, is_same_instance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "is_same_instance")]
		public static global::System.IntPtr is_same_instance(
					global::Realms.SharedRealmHandle__Realm lhs, 
					global::Realms.SharedRealmHandle__Realm rhs, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			lhs.DangerousAddRef(ref addRefed);
			rhs.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.is_same_instance(
								lhs.DangerousGetHandle(), 
								rhs.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				rhs.DangerousRelease();
			if (addRefed)
				lhs.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_schema_version, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "get_schema_version")]
		public static ulong get_schema_version(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			ulong unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_schema_version(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, compact, [fwd] [return] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "compact")]
		public static bool compact(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			bool __value;
			sbyte unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.compact(
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			__value = unsafe___value != 0;
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return __value;
		}

		// Signature, resolve_object_reference, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ThreadSafeReferenceHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "resolve_object_reference")]
		public static global::System.IntPtr resolve_object_reference(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.ThreadSafeReferenceHandle__Realm referenceHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			referenceHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.resolve_object_reference(
								sharedRealm.DangerousGetHandle(), 
								referenceHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				referenceHandle.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, resolve_list_reference, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ThreadSafeReferenceHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "resolve_list_reference")]
		public static global::System.IntPtr resolve_list_reference(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.ThreadSafeReferenceHandle__Realm referenceHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			referenceHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.resolve_list_reference(
								sharedRealm.DangerousGetHandle(), 
								referenceHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				referenceHandle.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, resolve_query_reference, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_ThreadSafeReferenceHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "resolve_query_reference")]
		public static global::System.IntPtr resolve_query_reference(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.ThreadSafeReferenceHandle__Realm referenceHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			referenceHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.resolve_query_reference(
								sharedRealm.DangerousGetHandle(), 
								referenceHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				referenceHandle.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, write_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "write_copy")]
		public static void write_copy(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					string path, 
					global::System.IntPtr path_len, 
					byte[] encryptionKey, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_path = default(ushort*);
			byte* unsafe_encryptionKey;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				fixed (byte* pinned_encryptionKey = global::__Interop.McgHelpers.GetArrayForCompat(encryptionKey))
				{
					unsafe_encryptionKey = (byte*)pinned_encryptionKey;
					// Call to native method
					global::__Interop.realm_wrappers_PInvokes.write_copy(
										sharedRealm.DangerousGetHandle(), 
										unsafe_path, 
										path_len, 
										unsafe_encryptionKey, 
										&(unsafe_ex)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					ex = unsafe_ex;
				}
			}
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, create_object, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "create_object")]
		public static global::System.IntPtr create_object(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.TableHandle__Realm table, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			table.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_object(
								sharedRealm.DangerousGetHandle(), 
								table.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				table.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_object_unique, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "create_object_unique")]
		public static global::System.IntPtr create_object_unique(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.TableHandle__Realm table, 
					long key, 
					bool has_value, 
					bool is_nullable, 
					bool update, 
					out bool is_new, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			sbyte unsafe_has_value;
			sbyte unsafe_is_nullable;
			sbyte unsafe_update;
			sbyte unsafe_is_new;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			table.DangerousAddRef(ref addRefed_1);
			unsafe_has_value = (has_value ? ((sbyte)1) : ((sbyte)0));
			unsafe_is_nullable = (is_nullable ? ((sbyte)1) : ((sbyte)0));
			unsafe_update = (update ? ((sbyte)1) : ((sbyte)0));
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_object_unique(
								sharedRealm.DangerousGetHandle(), 
								table.DangerousGetHandle(), 
								key, 
								unsafe_has_value, 
								unsafe_is_nullable, 
								unsafe_update, 
								&(unsafe_is_new), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			is_new = unsafe_is_new != 0;
			if (addRefed_1)
				table.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_object_unique__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.CBoolMarshaller] bool__bool, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "create_object_unique")]
		public static global::System.IntPtr create_object_unique__0(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.TableHandle__Realm table, 
					string value, 
					global::System.IntPtr valueLen, 
					bool update, 
					out bool is_new, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_value = default(ushort*);
			sbyte unsafe_update;
			sbyte unsafe_is_new;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			table.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				unsafe_update = (update ? ((sbyte)1) : ((sbyte)0));
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_object_unique__0(
									sharedRealm.DangerousGetHandle(), 
									table.DangerousGetHandle(), 
									unsafe_value, 
									valueLen, 
									unsafe_update, 
									&(unsafe_is_new), 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
				is_new = unsafe_is_new != 0;
			}
			if (addRefed_1)
				table.DangerousRelease();
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, get_schema, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.SharedRealmHandle+NativeMethods", "get_schema")]
		public static void get_schema(
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::System.IntPtr callback, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			sharedRealm.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.get_schema(
								sharedRealm.DangerousGetHandle(), 
								callback, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				sharedRealm.DangerousRelease();
			// Return
		}

		// Signature, count_all, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "count_all")]
		public static long count_all(
					global::Realms.TableHandle__Realm handle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			global::Realms.NativeException__Realm unsafe_ex;
			long unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.count_all(
								handle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, unbind, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "unbind")]
		public static void unbind(
					global::System.IntPtr tableHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			global::Realms.NativeException__Realm unsafe_ex;
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.unbind(
								tableHandle, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			// Return
		}

		// Signature, get_column_index__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "get_column_index")]
		public static global::System.IntPtr get_column_index__0(
					global::Realms.TableHandle__Realm tablehandle, 
					string name, 
					global::System.IntPtr nameLen, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			ushort* unsafe_name = default(ushort*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			tablehandle.DangerousAddRef(ref addRefed);
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.get_column_index__0(
									tablehandle.DangerousGetHandle(), 
									unsafe_name, 
									nameLen, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed)
				tablehandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_results__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "create_results")]
		public static global::System.IntPtr create_results__0(
					global::Realms.TableHandle__Realm handle, 
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			sharedRealm.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_results__0(
								handle.DangerousGetHandle(), 
								sharedRealm.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				sharedRealm.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, create_sorted_results__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_Realms_Native_SortDescriptorBuilder_Clause_Marshalable__Realm__Realms_Native__SortDescriptorBuilder_Clause_Marshalable__Realm *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "create_sorted_results")]
		public static global::System.IntPtr create_sorted_results__0(
					global::Realms.TableHandle__Realm handle, 
					global::Realms.SharedRealmHandle__Realm sharedRealm, 
					global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm[] sortClauses, 
					global::System.IntPtr clauseCount, 
					global::System.IntPtr[] flattenedColumnIndices, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType* unsafe_sortClauses = default(global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType*);
			global::System.IntPtr* unsafe_flattenedColumnIndices;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				handle.DangerousAddRef(ref addRefed);
				sharedRealm.DangerousAddRef(ref addRefed_1);
				if (sortClauses == null)
					unsafe_sortClauses = null;
				else
				{
					if (sortClauses != null)
						unsafe_sortClauses = (global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(sortClauses.Length * sizeof(global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType))));
					if (sortClauses != null)
						for (uint mcgIdx = 0; (mcgIdx < sortClauses.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.StructMarshaller] Realms_Native_SortDescriptorBuilder_Clause_Marshalable__Realm__Realms_Native__SortDescriptorBuilder_Clause_Marshalable__Realm sortClauses
							global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.Marshal__SafeToUnsafe(
												ref sortClauses[mcgIdx], 
												out unsafe_sortClauses[mcgIdx]
											);
						}
				}
				fixed (global::System.IntPtr* pinned_flattenedColumnIndices = global::__Interop.McgHelpers.GetArrayForCompat(flattenedColumnIndices))
				{
					unsafe_flattenedColumnIndices = (global::System.IntPtr*)pinned_flattenedColumnIndices;
					// Call to native method
					unsafe___value = global::__Interop.realm_wrappers_PInvokes.create_sorted_results__0(
										handle.DangerousGetHandle(), 
										sharedRealm.DangerousGetHandle(), 
										unsafe_sortClauses, 
										clauseCount, 
										unsafe_flattenedColumnIndices, 
										&(unsafe_ex)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					ex = unsafe_ex;
				}
				if (addRefed_1)
					sharedRealm.DangerousRelease();
				if (addRefed)
					handle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_sortClauses);
			}
		}

		// Signature, object_for_string_primarykey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "object_for_string_primarykey")]
		public static global::System.IntPtr object_for_string_primarykey(
					global::Realms.TableHandle__Realm handle, 
					global::Realms.SharedRealmHandle__Realm realmHandle, 
					string value, 
					global::System.IntPtr valueLen, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			ushort* unsafe_value = default(ushort*);
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			fixed (char* pinned_value = value)
			{
				unsafe_value = (ushort*)pinned_value;
				// Call to native method
				unsafe___value = global::__Interop.realm_wrappers_PInvokes.object_for_string_primarykey(
									handle.DangerousGetHandle(), 
									realmHandle.DangerousGetHandle(), 
									unsafe_value, 
									valueLen, 
									&(unsafe_ex)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ex = unsafe_ex;
			}
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, object_for_int_primarykey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "object_for_int_primarykey")]
		public static global::System.IntPtr object_for_int_primarykey(
					global::Realms.TableHandle__Realm handle, 
					global::Realms.SharedRealmHandle__Realm realmHandle, 
					long value, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.object_for_int_primarykey(
								handle.DangerousGetHandle(), 
								realmHandle.DangerousGetHandle(), 
								value, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, object_for_null_primarykey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_TableHandle__Realm____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Realms_SharedRealmHandle__Realm____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.TableHandle+NativeMethods", "object_for_null_primarykey")]
		public static global::System.IntPtr object_for_null_primarykey(
					global::Realms.TableHandle__Realm handle, 
					global::Realms.SharedRealmHandle__Realm realmHandle, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			realmHandle.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.object_for_null_primarykey(
								handle.DangerousGetHandle(), 
								realmHandle.DangerousGetHandle(), 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			if (addRefed_1)
				realmHandle.DangerousRelease();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, destroy__4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.ThreadSafeReferenceHandle+NativeMethods", "destroy")]
		public static void destroy__4(global::System.IntPtr handle)
		{
			// Marshalling
			// Call to native method
			global::__Interop.realm_wrappers_PInvokes.destroy__4(handle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, destroy_notificationtoken, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Realms_NativeException__Realm__Realms__NativeException__Realm, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Realm, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null", "Realms.NotifiableObjectHandleBase+NativeMethods", "destroy_notificationtoken")]
		public static global::System.IntPtr destroy_notificationtoken(
					global::System.IntPtr token, 
					out global::Realms.NativeException__Realm ex)
		{
			// Setup
			global::Realms.NativeException__Realm unsafe_ex;
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.realm_wrappers_PInvokes.destroy_notificationtoken(
								token, 
								&(unsafe_ex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ex = unsafe_ex;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, _RhYield, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_RhYield")]
		public static int _RhYield()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes._RhYield();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size)
		{
			// Marshalling
			// Call to native method
			global::__Interop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			// Marshalling
			// Call to native method
			global::__Interop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}

		// Signature, CallingConventionConverter_SpecifyCommonStubData, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_SpecifyCommonStubData")]
		public static void CallingConventionConverter_SpecifyCommonStubData(global::System.IntPtr commonStubData)
		{
			// Marshalling
			// Call to native method
			global::__Interop.__PInvokes.CallingConventionConverter_SpecifyCommonStubData(commonStubData);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_1_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_errorhandling_l1_1_1_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_1_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_1_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_1_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_1_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = global::__Interop.McgHelpers.GetArrayForCompat(arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					// Call to native method
					unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_1_dll_PInvokes.FormatMessage(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}

		// Signature, FormatMessage__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FormatMessage")]
		public static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = global::__Interop.McgHelpers.GetArrayForCompat(arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					// Call to native method
					unsafe___value = global::__Interop.api_ms_win_core_localization_l1_2_1_dll_PInvokes.FormatMessage__0(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			void* unsafe_bufferMarshalerPtr = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgMarshal.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-processenvironment-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_processenvironment_l1_2_0_dll
	{
		// Signature, GetCurrentDirectory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCurrentDirectory")]
		public static int GetCurrentDirectory(
					int nBufferLength, 
					global::System.Text.StringBuilder lpBuffer)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_processenvironment_l1_2_0_dll_PInvokes.GetCurrentDirectory(
									nBufferLength, 
									unsafe_lpBuffer
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'oleaut32.dll'
	/// </summary>
	public unsafe static partial class oleaut32_dll
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::__Interop.oleaut32_dll_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l1-2-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l1_2_1_dll
	{
		// Signature, CreateDirectoryPrivate, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_SECURITY_ATTRIBUTES__System_IO_FileSystem____Interop_mincore_SECURITY_ATTRIBUTES__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateDirectoryPrivate")]
		public static bool CreateDirectoryPrivate(
					string path, 
					ref global::Interop_mincore_SECURITY_ATTRIBUTES__System_IO_FileSystem lpSecurityAttributes)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			global::Interop_mincore_SECURITY_ATTRIBUTES__System_IO_FileSystem unsafe_lpSecurityAttributes;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				unsafe_lpSecurityAttributes = lpSecurityAttributes;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.CreateDirectoryPrivate(
									unsafe_path, 
									&(unsafe_lpSecurityAttributes)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				lpSecurityAttributes = unsafe_lpSecurityAttributes;
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, DeleteFilePrivate, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "DeleteFilePrivate")]
		public static bool DeleteFilePrivate(string path)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_path = path)
			{
				unsafe_path = (ushort*)pinned_path;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.DeleteFilePrivate(unsafe_path);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetLongPathNamePrivate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLongPathNamePrivate")]
		public static int GetLongPathNamePrivate(
					string path, 
					global::System.Text.StringBuilder longPathBuffer, 
					int bufferLength)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			ushort* unsafe_longPathBuffer = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_path = path)
				{
					unsafe_path = (ushort*)pinned_path;
					if (longPathBuffer == null)
						unsafe_longPathBuffer = null;
					else
					{
						unsafe_longPathBuffer = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(longPathBuffer.Capacity * 2 
											+ 2)));
						if (unsafe_longPathBuffer == null)
							throw new global::System.OutOfMemoryException();
					}
					// Call to native method
					unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.GetLongPathNamePrivate(
										unsafe_path, 
										unsafe_longPathBuffer, 
										bufferLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (longPathBuffer != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_longPathBuffer, 
											longPathBuffer
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_longPathBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_longPathBuffer);
			}
		}

		// Signature, GetFileType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileType")]
		public static int GetFileType(global::System.Runtime.InteropServices.SafeHandle hFile)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.GetFileType(hFile.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, SetFilePointerEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetFilePointerEx")]
		public static bool SetFilePointerEx(
					global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile, 
					long liDistanceToMove, 
					out long lpNewFilePointer, 
					uint dwMoveMethod)
		{
			// Setup
			bool addRefed = false;
			long unsafe_lpNewFilePointer;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.SetFilePointerEx(
								hFile.DangerousGetHandle(), 
								liDistanceToMove, 
								&(unsafe_lpNewFilePointer), 
								dwMoveMethod
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			lpNewFilePointer = unsafe_lpNewFilePointer;
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem unsafe_lpFileInformation;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				unsafe_lpFileInformation = lpFileInformation;
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.GetFileAttributesExPrivate(
									unsafe_name, 
									fileInfoLevel, 
									&(unsafe_lpFileInformation)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				lpFileInformation = unsafe_lpFileInformation;
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem____Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType unsafe_lpFindFileData = default(global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.Marshal__SafeToUnsafe(
									ref lpFindFileData, 
									out unsafe_lpFindFileData
								);
				__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.FindFirstFileExPrivate(
									unsafe_lpFileName, 
									fInfoLevelId, 
									&(unsafe_lpFindFileData), 
									fSearchOp, 
									lpSearchFilter, 
									dwAdditionalFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.Marshal__UnsafeToSafe(
									ref unsafe_lpFindFileData, 
									out lpFindFileData
								);
			}
			// Return
			return __value;
		}

		// Signature, SetEndOfFile, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetEndOfFile")]
		public static bool SetEndOfFile(global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.SetEndOfFile(hFile.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, CreateFile2, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_IO_FileShare__System_IO_FileSystem_Primitives__FileShare__System_IO_FileSystem_Primitives, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_IO_FileMode__System_IO_FileSystem_Primitives__FileMode__System_IO_FileSystem_Primitives, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem____Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateFile2")]
		public static global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem CreateFile2(
					string lpFileName, 
					int dwDesiredAccess, 
					global::System.IO.FileShare__System_IO_FileSystem_Primitives dwShareMode, 
					global::System.IO.FileMode__System_IO_FileSystem_Primitives dwCreationDisposition, 
					ref global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem parameters)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem unsafe_parameters;
			global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				unsafe_parameters = parameters;
				__value = new global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem();
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.CreateFile2(
									unsafe_lpFileName, 
									dwDesiredAccess, 
									dwShareMode, 
									dwCreationDisposition, 
									&(unsafe_parameters)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}

		// Signature, FindClose, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.FindClose(hFindFile);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ReadFile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "ReadFile")]
		public static int ReadFile(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToRead, 
					global::System.IntPtr numBytesRead_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* overlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.ReadFile(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToRead, 
								numBytesRead_mustBeZero, 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)overlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, ReadFile__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "ReadFile")]
		public static int ReadFile__0(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToRead, 
					out int numBytesRead, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			bool addRefed = false;
			int unsafe_numBytesRead;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.ReadFile__0(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToRead, 
								&(unsafe_numBytesRead), 
								mustBeZero
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			numBytesRead = unsafe_numBytesRead;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "WriteFile")]
		public static int WriteFile(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToWrite, 
					global::System.IntPtr numBytesWritten_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.WriteFile(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToWrite, 
								numBytesWritten_mustBeZero, 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "WriteFile")]
		public static int WriteFile__0(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToWrite, 
					out int numBytesWritten, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			bool addRefed = false;
			int unsafe_numBytesWritten;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.WriteFile__0(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToWrite, 
								&(unsafe_numBytesWritten), 
								mustBeZero
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			numBytesWritten = unsafe_numBytesWritten;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, FlushFileBuffers, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FlushFileBuffers")]
		public static bool FlushFileBuffers(global::System.Runtime.InteropServices.SafeHandle hHandle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l1_2_1_dll_PInvokes.FlushFileBuffers(hHandle.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ntdll.dll'
	/// </summary>
	public unsafe static partial class ntdll_dll
	{
		// Signature, RtlIpv6AddressToStringExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NtDll", "RtlIpv6AddressToStringExW")]
		public static uint RtlIpv6AddressToStringExW(
					byte[] address, 
					uint scopeId, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			uint unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::__Interop.McgHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::__Interop.ntdll_dll_PInvokes.RtlIpv6AddressToStringExW(
										unsafe_address, 
										scopeId, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}

		// Signature, RtlIpv4AddressToStringExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Net.Primitives, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+NtDll", "RtlIpv4AddressToStringExW")]
		public static uint RtlIpv4AddressToStringExW(
					byte[] address, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			uint unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::__Interop.McgHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::__Interop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::__Interop.ntdll_dll_PInvokes.RtlIpv4AddressToStringExW(
										unsafe_address, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l2-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l2_1_1_dll
	{
		// Signature, GetFileInformationByHandleEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem__Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem____Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileInformationByHandleEx")]
		public static bool GetFileInformationByHandleEx(
					global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile, 
					global::Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					out global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem lpFileInformation, 
					uint dwBufferSize)
		{
			// Setup
			bool addRefed = false;
			global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem unsafe_lpFileInformation;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_file_l2_1_1_dll_PInvokes.GetFileInformationByHandleEx(
								hFile.DangerousGetHandle(), 
								FileInformationClass, 
								&(unsafe_lpFileInformation), 
								dwBufferSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			lpFileInformation = unsafe_lpFileInformation;
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-threadpool-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll
	{
		// Signature, CreateThreadpoolIo, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Interop_NativeIoCompletionCallback__System_Threading_Overlapped____Interop_NativeIoCompletionCallback__System_Threading_Overlapped, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateThreadpoolIo")]
		public static global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped CreateThreadpoolIo(
					global::System.Runtime.InteropServices.SafeHandle fl, 
					global::Interop_NativeIoCompletionCallback__System_Threading_Overlapped pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_pfnio = default(void*);
			global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped __value;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fl.DangerousAddRef(ref addRefed);
				unsafe_pfnio = (void*)global::System.Runtime.InteropServices.McgMarshal.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+NativeIoCompletionCallback,System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken" +
											"=b03f5f7f11d50a3a"), 
									pfnio
								);
				__value = new global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped();
				// Call to native method
				unsafe___value = global::__Interop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CreateThreadpoolIo(
									fl.DangerousGetHandle(), 
									unsafe_pfnio, 
									context, 
									pcbe
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					fl.DangerousRelease();
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(pfnio);
			}
		}

		// Signature, CloseThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CloseThreadpoolIo")]
		public static void CloseThreadpoolIo(global::System.IntPtr pio)
		{
			// Marshalling
			// Call to native method
			global::__Interop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CloseThreadpoolIo(pio);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, StartThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "StartThreadpoolIo")]
		public static void StartThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.StartThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}

		// Signature, CancelThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CancelThreadpoolIo")]
		public static void CancelThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::__Interop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CancelThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-handle-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll
	{
		// Signature, CloseHandle, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_handle_l1_1_0_dll_PInvokes.CloseHandle(handle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-io-l1-1-1.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_io_l1_1_1_dll
	{
		// Signature, CancelIoEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CancelIoEx")]
		public static bool CancelIoEx(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::__Interop.api_ms_win_core_io_l1_1_1_dll_PInvokes.CancelIoEx(
								handle.DangerousGetHandle(), 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	public unsafe static partial class realm_wrappers_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void register_callbacks(
					void* notifyRealmCallback, 
					void* nativeSchemaCallback);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void delete_pointer(void* pointer);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="realm_reset_for_testing", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void reset_for_testing();

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="realm_install_eventloop_callbacks", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void install_eventloop_callbacks(
					void* get, 
					void* post, 
					void* release);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_add_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void add_object(
					global::System.IntPtr listHandle, 
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_add_primitive", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void add_primitive(
					global::System.IntPtr listHandle, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_add_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void add_string(
					global::System.IntPtr listHandle, 
					ushort* value, 
					global::System.IntPtr valueLength, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_add_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void add_binary(
					global::System.IntPtr listHandle, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_insert_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void insert_object(
					global::System.IntPtr listHandle, 
					global::System.IntPtr targetIndex, 
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_insert_primitive", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void insert_primitive(
					global::System.IntPtr listHandle, 
					global::System.IntPtr targetIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_insert_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void insert_string(
					global::System.IntPtr listHandle, 
					global::System.IntPtr targetIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_insert_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void insert_binary(
					global::System.IntPtr listHandle, 
					global::System.IntPtr targetIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_object(
					global::System.IntPtr listHandle, 
					global::System.IntPtr link_ndx, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_primitive", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void get_primitive(
					global::System.IntPtr listHandle, 
					global::System.IntPtr link_ndx, 
					void** value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_string(
					global::System.IntPtr listHandle, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte* isNull, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_binary(
					global::System.IntPtr listHandle, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte* isNull, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_find_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr find_object(
					global::System.IntPtr listHandle, 
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_find_primitive", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr find_primitive(
					global::System.IntPtr listHandle, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_find_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr find_string(
					global::System.IntPtr listHandle, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_find_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr find_binary(
					global::System.IntPtr listHandle, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte has_value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_erase", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void erase(
					global::System.IntPtr listHandle, 
					global::System.IntPtr rowIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_clear", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void clear(
					global::System.IntPtr listHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_size", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr size(
					global::System.IntPtr listHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy(global::System.IntPtr listInternalHandle);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_add_notification_callback", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr add_notification_callback(
					global::System.IntPtr listHandle, 
					global::System.IntPtr managedListHandle, 
					void* callback, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_move", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr move(
					global::System.IntPtr listHandle, 
					global::System.IntPtr sourceIndex, 
					global::System.IntPtr targetIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_is_valid", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte get_is_valid(
					global::System.IntPtr listHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_get_thread_safe_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_thread_safe_reference(
					global::System.IntPtr listHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="list_snapshot", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr snapshot(
					global::System.IntPtr list, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_is_valid", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte get_is_valid__0(
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_row_index", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_row_index(
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy__0(global::System.IntPtr objectHandle);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_timestamp_ticks", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_timestamp_ticks(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_timestamp_ticks", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long get_timestamp_ticks(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_nullable_timestamp_ticks", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_nullable_timestamp_ticks(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					long* retVal, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_string(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_string__0(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte* isNull, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_link", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_link(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr targetHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_link", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_link(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_clear_link", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void clear_link(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_list", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_list(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_null", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_null(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_bool", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_bool(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_bool", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_bool(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_nullable_bool", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_nullable_bool(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr* retVal, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_int64", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_int64(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_add_int64", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void add_int64(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_int64", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long get_int64(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_nullable_int64", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_nullable_int64(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					long* retVal, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_float", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_float(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_float", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static float get_float(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_nullable_float", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_nullable_float(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					float* retVal, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_double", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_double(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_double", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static double get_double(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_nullable_double", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_nullable_double(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					double* retVal, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_set_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr set_binary(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_binary__0(
					global::System.IntPtr handle, 
					global::System.IntPtr propertyIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					sbyte* is_null, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_remove_row", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void remove_row(
					global::System.IntPtr handle, 
					global::System.IntPtr realmHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_equals_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte equals_object(
					global::System.IntPtr handle, 
					global::System.IntPtr otherHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_backlinks", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_backlinks(
					global::System.IntPtr objectHandle, 
					global::System.IntPtr propertyIndex, 
					global::Realms.NativeException__Realm* nativeException);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_backlinks_for_type", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_backlinks_for_type(
					global::System.IntPtr objectHandle, 
					ushort* type, 
					global::System.IntPtr typeLen, 
					ushort* property, 
					global::System.IntPtr propertyLen, 
					global::Realms.NativeException__Realm* nativeException);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_thread_safe_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_thread_safe_reference__0(
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_add_notification_callback", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr add_notification_callback__0(
					global::System.IntPtr objectHandle, 
					global::System.IntPtr managedObjectHandle, 
					void* callback, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_get_backlink_count", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_backlink_count(
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_binary_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void binary_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_binary_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void binary_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufferLength, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_contains", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_contains(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_starts_with", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_starts_with(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_ends_with", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_ends_with(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_string_like", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void string_like(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte caseSensitive, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_bool_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void bool_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_bool_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void bool_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_less", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_less(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_less_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_less_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_greater", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_greater(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_int_greater_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void int_greater_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_less", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_less(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_less_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_less_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_greater", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_greater(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_long_greater_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void long_greater_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_less", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_less(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_less_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_less_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_greater", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_greater(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_float_greater_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void float_greater_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					float value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_less", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_less(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_less_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_less_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_greater", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_greater(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_double_greater_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void double_greater_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					double value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_less", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_less(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_less_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_less_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_greater", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_greater(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_timestamp_ticks_greater_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void timestamp_ticks_greater_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void query_object_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::System.IntPtr objectHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_null_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void null_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_null_not_equal", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void null_not_equal(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr columnIndex, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_find", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr findDirect(
					global::System.IntPtr queryHandle, 
					global::System.IntPtr beginAtIndex, 
					global::System.IntPtr realmHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_find_next", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr findNext(
					global::System.IntPtr queryHandle, 
					global::System.IntPtr previousObject, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_get_column_index", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_column_index(
					global::System.IntPtr queryPtr, 
					ushort* columnName, 
					global::System.IntPtr columnNameLen, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_not", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void not(
					global::System.IntPtr queryHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_group_begin", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void group_begin(
					global::System.IntPtr queryHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_group_end", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void group_end(
					global::System.IntPtr queryHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_or", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void or(
					global::System.IntPtr queryHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy__1(global::System.IntPtr queryHandle);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_count", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr count(
					global::System.IntPtr QueryHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_create_results", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_results(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="query_create_sorted_results", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_sorted_results(
					global::System.IntPtr queryPtr, 
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr tablePtr, 
					global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType* sortClauses, 
					global::System.IntPtr clauseCount, 
					global::System.IntPtr* flattenedPropertyIndices, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_is_same_internal_results", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr is_same_internal_results(
					global::System.IntPtr lhs, 
					global::System.IntPtr rhs, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy__2(global::System.IntPtr resultsHandle);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_object__0(
					global::System.IntPtr results, 
					global::System.IntPtr index, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_primitive", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void get_primitive__0(
					global::System.IntPtr results, 
					global::System.IntPtr link_ndx, 
					void** value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_string", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_string__1(
					global::System.IntPtr results, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte* isNull, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_binary", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_binary__1(
					global::System.IntPtr results, 
					global::System.IntPtr link_ndx, 
					global::System.IntPtr buffer, 
					global::System.IntPtr bufsize, 
					sbyte* isNull, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_count", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr count__0(
					global::System.IntPtr results, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_clear", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void clear__0(
					global::System.IntPtr results, 
					global::System.IntPtr realmHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_add_notification_callback", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr add_notification_callback__1(
					global::System.IntPtr results, 
					global::System.IntPtr managedResultsHandle, 
					void* callback, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_query", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_query(
					global::System.IntPtr results, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_is_valid", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte get_is_valid__1(
					global::System.IntPtr results, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_get_thread_safe_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_thread_safe_reference__1(
					global::System.IntPtr results, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="results_snapshot", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr snapshot__0(
					global::System.IntPtr results, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_open", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr open(
					global::Realms.Native.Configuration__Realm__Impl.UnsafeType configuration, 
					global::Realms.Native.SchemaObject__Realm__Impl.UnsafeType* objects, 
					int objects_length, 
					global::Realms.Native.SchemaProperty__Realm__Impl.UnsafeType* properties, 
					byte* encryptionKey, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_set_managed_state_handle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void set_managed_state_handle(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr managedStateHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_get_managed_state_handle", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_managed_state_handle(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy__3(global::System.IntPtr sharedRealm);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_close_realm", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void close_realm(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_begin_transaction", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void begin_transaction(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_commit_transaction", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void commit_transaction(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_cancel_transaction", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void cancel_transaction(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_is_in_transaction", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr is_in_transaction(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_refresh", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr refresh(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_get_table", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_table(
					global::System.IntPtr sharedRealm, 
					ushort* tableName, 
					global::System.IntPtr tableNameLength, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_is_same_instance", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr is_same_instance(
					global::System.IntPtr lhs, 
					global::System.IntPtr rhs, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_get_schema_version", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static ulong get_schema_version(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_compact", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static sbyte compact(
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_resolve_object_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr resolve_object_reference(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr referenceHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_resolve_list_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr resolve_list_reference(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr referenceHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_resolve_query_reference", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr resolve_query_reference(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr referenceHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_write_copy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void write_copy(
					global::System.IntPtr sharedRealm, 
					ushort* path, 
					global::System.IntPtr path_len, 
					byte* encryptionKey, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_create_object", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_object(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr table, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_create_object_int_unique", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_object_unique(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr table, 
					long key, 
					sbyte has_value, 
					sbyte is_nullable, 
					sbyte update, 
					sbyte* is_new, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_create_object_string_unique", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_object_unique__0(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr table, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					sbyte update, 
					sbyte* is_new, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="shared_realm_get_schema", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void get_schema(
					global::System.IntPtr sharedRealm, 
					global::System.IntPtr callback, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="table_count_all", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long count_all(
					global::System.IntPtr handle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="table_unbind", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void unbind(
					global::System.IntPtr tableHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="table_get_column_index", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr get_column_index__0(
					global::System.IntPtr tablehandle, 
					ushort* name, 
					global::System.IntPtr nameLen, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="table_create_results", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_results__0(
					global::System.IntPtr handle, 
					global::System.IntPtr sharedRealm, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="table_create_sorted_results", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr create_sorted_results__0(
					global::System.IntPtr handle, 
					global::System.IntPtr sharedRealm, 
					global::Realms.Native.SortDescriptorBuilder_Clause_Marshalable__Realm__Impl.UnsafeType* sortClauses, 
					global::System.IntPtr clauseCount, 
					global::System.IntPtr* flattenedColumnIndices, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr object_for_string_primarykey(
					global::System.IntPtr handle, 
					global::System.IntPtr realmHandle, 
					ushort* value, 
					global::System.IntPtr valueLen, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr object_for_int_primarykey(
					global::System.IntPtr handle, 
					global::System.IntPtr realmHandle, 
					long value, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr object_for_null_primarykey(
					global::System.IntPtr handle, 
					global::System.IntPtr realmHandle, 
					global::Realms.NativeException__Realm* ex);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="thread_safe_reference_destroy", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void destroy__4(global::System.IntPtr handle);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("realm-wrappers", EntryPoint="object_destroy_notificationtoken", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr destroy_notificationtoken(
					global::System.IntPtr token, 
					global::Realms.NativeException__Realm* ex);
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", EntryPoint="RhYield", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int _RhYield();

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					uint size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_SpecifyCommonStubData(global::System.IntPtr commonStubData);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage__0(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(void** bufferMarshalerPtr);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class api_ms_win_core_processenvironment_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processenvironment-l1-2-0.dll", EntryPoint="GetCurrentDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCurrentDirectory(
					int nBufferLength, 
					ushort* lpBuffer);
	}

	public unsafe static partial class oleaut32_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class api_ms_win_core_file_l1_2_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="CreateDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CreateDirectoryPrivate(
					ushort* path, 
					global::Interop_mincore_SECURITY_ATTRIBUTES__System_IO_FileSystem* lpSecurityAttributes);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="DeleteFileW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int DeleteFilePrivate(ushort* path);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="GetLongPathNameW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLongPathNamePrivate(
					ushort* path, 
					ushort* longPathBuffer, 
					int bufferLength);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileType(global::System.IntPtr hFile);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFilePointerEx(
					global::System.IntPtr hFile, 
					long liDistanceToMove, 
					long* lpNewFilePointer, 
					uint dwMoveMethod);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType* lpFindFileData, 
					global::Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetEndOfFile(global::System.IntPtr hFile);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateFile2(
					ushort* lpFileName, 
					int dwDesiredAccess, 
					global::System.IO.FileShare__System_IO_FileSystem_Primitives dwShareMode, 
					global::System.IO.FileMode__System_IO_FileSystem_Primitives dwCreationDisposition, 
					global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* parameters);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					global::System.IntPtr numBytesRead_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* overlapped);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="ReadFile", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile__0(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					int* numBytesRead, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					global::System.IntPtr numBytesWritten_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="WriteFile", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile__0(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					int* numBytesWritten, 
					global::System.IntPtr mustBeZero);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FlushFileBuffers(global::System.IntPtr hHandle);
	}

	public unsafe static partial class ntdll_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint RtlIpv6AddressToStringExW(
					byte* address, 
					uint scopeId, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static uint RtlIpv4AddressToStringExW(
					byte* address, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);
	}

	public unsafe static partial class api_ms_win_core_file_l2_1_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l2-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileInformationByHandleEx(
					global::System.IntPtr hFile, 
					global::Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem* lpFileInformation, 
					uint dwBufferSize);
	}

	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateThreadpoolIo(
					global::System.IntPtr fl, 
					void* pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CloseThreadpoolIo(global::System.IntPtr pio);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void StartThreadpoolIo(global::System.IntPtr pio);

		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CancelThreadpoolIo(global::System.IntPtr pio);
	}

	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-handle-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);
	}

	public unsafe static partial class api_ms_win_core_io_l1_1_1_dll_PInvokes
	{
		[global::System.Runtime.InteropServices.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-io-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CancelIoEx(
					global::System.IntPtr handle, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped);
	}
}

