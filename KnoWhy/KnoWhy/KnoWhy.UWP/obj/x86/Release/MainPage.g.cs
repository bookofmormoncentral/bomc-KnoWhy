#pragma checksum "C:\Users\j_rob\Desktop\KnoWhy\KnoWhy\KnoWhy.UWP\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "EFA5BE3392C9B1FFE2DE26F1E3D1B6BC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KnoWhy.UWP
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(global::Windows.UI.Xaml.Controls.FontIcon obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Glyph = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Media_ImageBrush_ImageSource(global::Windows.UI.Xaml.Media.ImageBrush obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.ImageSource = value;
            }
        };

        private class MainPage_obj43_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::KnoWhy.Model.Meta dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.FontIcon obj44;
            private global::Windows.UI.Xaml.Controls.FontIcon obj45;
            private global::Windows.UI.Xaml.Media.ImageBrush obj46;
            private global::Windows.UI.Xaml.Controls.TextBlock obj47;
            private global::Windows.UI.Xaml.Controls.TextBlock obj48;
            private global::Windows.UI.Xaml.Controls.TextBlock obj49;

            private MainPage_obj43_BindingsTracking bindingsTracking;

            public MainPage_obj43_Bindings()
            {
                this.bindingsTracking = new MainPage_obj43_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 44:
                        this.obj44 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 45:
                        this.obj45 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 46:
                        this.obj46 = (global::Windows.UI.Xaml.Media.ImageBrush)target;
                        break;
                    case 47:
                        this.obj47 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 48:
                        this.obj48 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 49:
                        this.obj49 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::KnoWhy.Model.Meta data = args.NewValue as global::KnoWhy.Model.Meta;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::KnoWhy.Model.Meta was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::KnoWhy.Model.Meta);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::KnoWhy.Model.Meta) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj43_Bindings

            public void SetDataRoot(global::KnoWhy.Model.Meta newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::KnoWhy.Model.Meta obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_isRead(obj.isRead, phase);
                        this.Update_isFavorite(obj.isFavorite, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_mainImageURL(obj.mainImageURL, phase);
                        this.Update_formattedDate(obj.formattedDate, phase);
                        this.Update_title(obj.title, phase);
                        this.Update_scriptureReference(obj.scriptureReference, phase);
                    }
                }
            }
            private void Update_isRead(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj44, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("Visibility").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_isFavorite(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj45, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityInv").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_mainImageURL(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_ImageBrush_ImageSource(this.obj46, (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), obj), null);
                }
            }
            private void Update_formattedDate(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj47, obj, null);
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj48, obj, null);
                }
            }
            private void Update_scriptureReference(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj49, obj, null);
                }
            }

            private class MainPage_obj43_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj43_Bindings> WeakRefToBindingObj; 

                public MainPage_obj43_BindingsTracking(MainPage_obj43_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj43_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj43_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::KnoWhy.Model.Meta obj = sender as global::KnoWhy.Model.Meta;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_isRead(obj.isRead, DATA_CHANGED);
                                    bindings.Update_isFavorite(obj.isFavorite, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "isRead":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_isRead(obj.isRead, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "isFavorite":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_isFavorite(obj.isFavorite, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::KnoWhy.Model.Meta obj)
                {
                    MainPage_obj43_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::KnoWhy.UWP.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.Button obj9;
            private global::Windows.UI.Xaml.Controls.Button obj10;
            private global::Windows.UI.Xaml.Controls.Button obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj18;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj19;
            private global::RefreshableListView.RefreshableListView obj23;
            private global::Windows.UI.Xaml.Controls.Grid obj24;
            private global::Windows.UI.Xaml.Controls.StackPanel obj27;
            private global::Windows.UI.Xaml.Controls.TextBlock obj28;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Controls.TextBlock obj30;
            private global::Windows.UI.Xaml.Controls.TextBlock obj31;
            private global::Windows.UI.Xaml.Controls.FontIcon obj32;
            private global::Windows.UI.Xaml.Controls.Button obj33;
            private global::Windows.UI.Xaml.Controls.Button obj34;
            private global::Windows.UI.Xaml.Controls.Button obj35;
            private global::Windows.UI.Xaml.Controls.TextBlock obj36;
            private global::Windows.UI.Xaml.Controls.ComboBox obj37;
            private global::Windows.UI.Xaml.Controls.TextBlock obj38;
            private global::Windows.UI.Xaml.Controls.ComboBox obj39;
            private global::Windows.UI.Xaml.Controls.TextBlock obj41;
            private global::Windows.UI.Xaml.Documents.Run obj42;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 23:
                        this.obj23 = (global::RefreshableListView.RefreshableListView)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 28:
                        this.obj28 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 29:
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 30:
                        this.obj30 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 31:
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 32:
                        this.obj32 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 33:
                        this.obj33 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 34:
                        this.obj34 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 35:
                        this.obj35 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 36:
                        this.obj36 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 37:
                        this.obj37 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 38:
                        this.obj38 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 39:
                        this.obj39 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 41:
                        this.obj41 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 42:
                        this.obj42 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj1_Bindings

            public void SetDataRoot(global::KnoWhy.UWP.MainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::KnoWhy.UWP.MainPage obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_loadingLabel(obj.loadingLabel, phase);
                        this.Update_webLinksLabel(obj.webLinksLabel, phase);
                        this.Update_link1Url(obj.link1Url, phase);
                        this.Update_link2Url(obj.link2Url, phase);
                        this.Update_link3Url(obj.link3Url, phase);
                        this.Update_link3Label(obj.link3Label, phase);
                        this.Update_link2Label(obj.link2Label, phase);
                        this.Update_link1Label(obj.link1Label, phase);
                        this.Update_settingsLabel(obj.settingsLabel, phase);
                        this.Update_updateLabel(obj.updateLabel, phase);
                        this.Update_lastUpdate(obj.lastUpdate, phase);
                        this.Update_isUpdating(obj.isUpdating, phase);
                        this.Update_isUpdatingLabel(obj.isUpdatingLabel, phase);
                        this.Update_knoWhy(obj.knoWhy, phase);
                        this.Update_filterEnabled(obj.filterEnabled, phase);
                        this.Update_filterLabel(obj.filterLabel, phase);
                        this.Update_filterDesc(obj.filterDesc, phase);
                        this.Update_sortLabel(obj.sortLabel, phase);
                        this.Update_sortDesc(obj.sortDesc, phase);
                        this.Update_updateFilterButtons(obj.updateFilterButtons, phase);
                        this.Update_textFilter(obj.textFilter, phase);
                        this.Update_bookLabel(obj.bookLabel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_booksList(obj.booksList, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_chapterLabel(obj.chapterLabel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_chaptersList(obj.chaptersList, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_emptyListLabel(obj.emptyListLabel, phase);
                    }
                }
            }
            private void Update_loadingLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                }
            }
            private void Update_webLinksLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                }
            }
            private void Update_link1Url(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityString").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_link2Url(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityString").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_link3Url(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityString").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_link3Label(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                }
            }
            private void Update_link2Label(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                }
            }
            private void Update_link1Label(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                }
            }
            private void Update_settingsLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                }
            }
            private void Update_updateLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                }
            }
            private void Update_lastUpdate(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_isUpdating(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("Visibility").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityInv").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityInv").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_isUpdatingLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj, null);
                }
            }
            private void Update_knoWhy(global::KnoWhy.KnoWhy obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_knoWhy_metaList(obj.metaList, phase);
                    }
                }
            }
            private void Update_knoWhy_metaList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_knoWhy_metaList(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_knoWhy_metaList_Count(obj.Count, phase);
                    }
                }
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj23, obj, null);
                }
            }
            private void Update_filterEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityInv").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj27, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("visibilityInv").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(this.obj32, (global::System.String)this.LookupConverter("filterEnabled").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_filterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj28, obj, null);
                }
            }
            private void Update_filterDesc(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, obj, null);
                }
            }
            private void Update_sortLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj30, obj, null);
                }
            }
            private void Update_sortDesc(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj31, obj, null);
                }
            }
            private void Update_updateFilterButtons(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj33, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityPreviousButton").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj35, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityNextButton").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_textFilter(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj34, obj, null);
                }
            }
            private void Update_bookLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj36, obj, null);
                }
            }
            private void Update_booksList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Books> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj37, obj, null);
                }
            }
            private void Update_chapterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj38, obj, null);
                }
            }
            private void Update_chaptersList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Chapter> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj39, obj, null);
                }
            }
            private void Update_knoWhy_metaList_Count(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj41, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityCount").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_emptyListLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj42, obj, null);
                }
            }

            private class MainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj1_Bindings> WeakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_knoWhy_metaList(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::KnoWhy.UWP.MainPage obj = sender as global::KnoWhy.UWP.MainPage;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_loadingLabel(obj.loadingLabel, DATA_CHANGED);
                                    bindings.Update_webLinksLabel(obj.webLinksLabel, DATA_CHANGED);
                                    bindings.Update_link1Url(obj.link1Url, DATA_CHANGED);
                                    bindings.Update_link2Url(obj.link2Url, DATA_CHANGED);
                                    bindings.Update_link3Url(obj.link3Url, DATA_CHANGED);
                                    bindings.Update_link3Label(obj.link3Label, DATA_CHANGED);
                                    bindings.Update_link2Label(obj.link2Label, DATA_CHANGED);
                                    bindings.Update_link1Label(obj.link1Label, DATA_CHANGED);
                                    bindings.Update_settingsLabel(obj.settingsLabel, DATA_CHANGED);
                                    bindings.Update_updateLabel(obj.updateLabel, DATA_CHANGED);
                                    bindings.Update_lastUpdate(obj.lastUpdate, DATA_CHANGED);
                                    bindings.Update_isUpdating(obj.isUpdating, DATA_CHANGED);
                                    bindings.Update_isUpdatingLabel(obj.isUpdatingLabel, DATA_CHANGED);
                                    bindings.Update_knoWhy(obj.knoWhy, DATA_CHANGED);
                                    bindings.Update_filterEnabled(obj.filterEnabled, DATA_CHANGED);
                                    bindings.Update_filterLabel(obj.filterLabel, DATA_CHANGED);
                                    bindings.Update_filterDesc(obj.filterDesc, DATA_CHANGED);
                                    bindings.Update_sortLabel(obj.sortLabel, DATA_CHANGED);
                                    bindings.Update_sortDesc(obj.sortDesc, DATA_CHANGED);
                                    bindings.Update_updateFilterButtons(obj.updateFilterButtons, DATA_CHANGED);
                                    bindings.Update_textFilter(obj.textFilter, DATA_CHANGED);
                                    bindings.Update_bookLabel(obj.bookLabel, DATA_CHANGED);
                                    bindings.Update_chapterLabel(obj.chapterLabel, DATA_CHANGED);
                                    bindings.Update_emptyListLabel(obj.emptyListLabel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "loadingLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_loadingLabel(obj.loadingLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "webLinksLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_webLinksLabel(obj.webLinksLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link1Url":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link1Url(obj.link1Url, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link2Url":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link2Url(obj.link2Url, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link3Url":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link3Url(obj.link3Url, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link3Label":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link3Label(obj.link3Label, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link2Label":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link2Label(obj.link2Label, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "link1Label":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_link1Label(obj.link1Label, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "settingsLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_settingsLabel(obj.settingsLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "updateLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_updateLabel(obj.updateLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "lastUpdate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_lastUpdate(obj.lastUpdate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "isUpdating":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_isUpdating(obj.isUpdating, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "isUpdatingLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_isUpdatingLabel(obj.isUpdatingLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "knoWhy":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_knoWhy(obj.knoWhy, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterEnabled(obj.filterEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterLabel(obj.filterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterDesc":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterDesc(obj.filterDesc, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortLabel(obj.sortLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortDesc":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortDesc(obj.sortDesc, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "updateFilterButtons":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_updateFilterButtons(obj.updateFilterButtons, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "textFilter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_textFilter(obj.textFilter, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bookLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_bookLabel(obj.bookLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "chapterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_chapterLabel(obj.chapterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "emptyListLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_emptyListLabel(obj.emptyListLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::KnoWhy.UWP.MainPage obj)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_knoWhy_metaList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_knoWhy_metaList_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_knoWhy_metaList_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_knoWhy_metaList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta>;
                if (obj != null)
                {
                        bindings.Update_knoWhy_metaList_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta> cache_knoWhy_metaList = null;
                public void UpdateChildListeners_knoWhy_metaList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Meta> obj)
                {
                    if (obj != cache_knoWhy_metaList)
                    {
                        if (cache_knoWhy_metaList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_knoWhy_metaList).PropertyChanged -= PropertyChanged_knoWhy_metaList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_knoWhy_metaList).CollectionChanged -= CollectionChanged_knoWhy_metaList;
                            cache_knoWhy_metaList = null;
                        }
                        if (obj != null)
                        {
                            cache_knoWhy_metaList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_knoWhy_metaList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_knoWhy_metaList;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    #line 10 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Page)element1).SizeChanged += this.Page_SizeChanged;
                    #line 13 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Loaded;
                    #line default
                }
                break;
            case 2:
                {
                    this.RootSplitView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                }
                break;
            case 3:
                {
                    this.progressGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 5:
                {
                    this.updateButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 84 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.updateButton).Click += this.updateButton_Click;
                    #line default
                }
                break;
            case 6:
                {
                    this.settingsButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 102 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.settingsButton).Click += this.settingsButton_Click;
                    #line default
                }
                break;
            case 8:
                {
                    this.NavPaneDivider = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 9:
                {
                    this.link1Button = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 119 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.link1Button).Click += this.link1Button_Click;
                    #line default
                }
                break;
            case 10:
                {
                    this.link2Button = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 132 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.link2Button).Click += this.link2Button_Click;
                    #line default
                }
                break;
            case 11:
                {
                    this.link3Button = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 145 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.link3Button).Click += this.link3Button_Click;
                    #line default
                }
                break;
            case 20:
                {
                    this.ContentSplitView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                }
                break;
            case 21:
                {
                    this.listGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 22:
                {
                    this.SpinnerStoryboard = (global::Windows.UI.Xaml.Media.Animation.Storyboard)(target);
                }
                break;
            case 23:
                {
                    this.refreshableListView = (global::RefreshableListView.RefreshableListView)(target);
                    #line 206 "..\..\..\MainPage.xaml"
                    ((global::RefreshableListView.RefreshableListView)this.refreshableListView).SelectionChanged += this.ListView_SelectionChanged;
                    #line 207 "..\..\..\MainPage.xaml"
                    ((global::RefreshableListView.RefreshableListView)this.refreshableListView).PullProgressChanged += this.listView_PullProgressChanged;
                    #line 208 "..\..\..\MainPage.xaml"
                    ((global::RefreshableListView.RefreshableListView)this.refreshableListView).RefreshRequested += this.listView_RefreshRequested;
                    #line default
                }
                break;
            case 25:
                {
                    this.buttonFilter = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 335 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonFilter).Click += this.buttonFilter_Click;
                    #line default
                }
                break;
            case 26:
                {
                    this.buttonSort = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 341 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonSort).Click += this.buttonSort_Click;
                    #line default
                }
                break;
            case 33:
                {
                    this.previousChapterButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 296 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.previousChapterButton).Click += this.previousChapterButton_Click;
                    #line default
                }
                break;
            case 35:
                {
                    this.nextChapterButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 321 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.nextChapterButton).Click += this.nextChapterButton_Click;
                    #line default
                }
                break;
            case 37:
                {
                    this.comboBooks = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    #line 314 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.comboBooks).SelectionChanged += this.comboBooks_SelectionChanged;
                    #line default
                }
                break;
            case 39:
                {
                    this.comboChapters = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    #line 316 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.comboChapters).SelectionChanged += this.comboChapters_SelectionChanged;
                    #line default
                }
                break;
            case 40:
                {
                    this.SpinnerTransform = (global::Windows.UI.Xaml.Media.RotateTransform)(target);
                }
                break;
            case 41:
                {
                    this.listHeader = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 50:
                {
                    this.HamburgerButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 199 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.HamburgerButton).Click += this.HamburgerButton_Click;
                    #line default
                }
                break;
            case 51:
                {
                    this.frameArticle = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 43:
                {
                    global::Windows.UI.Xaml.Controls.Grid element43 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj43_Bindings bindings = new MainPage_obj43_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::KnoWhy.Model.Meta) element43.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element43.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element43, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

