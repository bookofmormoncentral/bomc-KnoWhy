#pragma checksum "C:\Users\j_rob\Desktop\KnoWhy\KnoWhy\KnoWhy.UWP\SortAndFilterDialog.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "7AB21F3B692DD4BA9D5D92C7AE632187"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KnoWhy.UWP
{
    partial class SortAndFilterDialog : 
        global::Windows.UI.Xaml.Controls.ContentDialog, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ContentDialog_PrimaryButtonText(global::Windows.UI.Xaml.Controls.ContentDialog obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.PrimaryButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentDialog_Title(global::Windows.UI.Xaml.Controls.ContentDialog obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Title = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        private class SortAndFilterDialog_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISortAndFilterDialog_Bindings
        {
            private global::KnoWhy.UWP.SortAndFilterDialog dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj1;
            private global::Windows.UI.Xaml.Controls.TextBlock obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.Grid obj9;
            private global::Windows.UI.Xaml.Controls.Grid obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.ComboBox obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.ComboBox obj14;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.FontIcon obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.FontIcon obj18;
            private global::Windows.UI.Xaml.Controls.TextBlock obj19;
            private global::Windows.UI.Xaml.Controls.FontIcon obj20;
            private global::Windows.UI.Xaml.Controls.TextBlock obj23;
            private global::Windows.UI.Xaml.Controls.FontIcon obj24;
            private global::Windows.UI.Xaml.Controls.TextBlock obj25;
            private global::Windows.UI.Xaml.Controls.FontIcon obj26;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;
            private global::Windows.UI.Xaml.Controls.FontIcon obj28;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Controls.FontIcon obj30;

            private SortAndFilterDialog_obj1_BindingsTracking bindingsTracking;

            public SortAndFilterDialog_obj1_Bindings()
            {
                this.bindingsTracking = new SortAndFilterDialog_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 1:
                        this.obj1 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.ContentDialog)target);
                        break;
                    case 2:
                        this.obj2 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 25:
                        this.obj25 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 26:
                        this.obj26 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 28:
                        this.obj28 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 29:
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 30:
                        this.obj30 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            // ISortAndFilterDialog_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // SortAndFilterDialog_obj1_Bindings

            public void SetDataRoot(global::KnoWhy.UWP.SortAndFilterDialog newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::KnoWhy.UWP.SortAndFilterDialog obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_doneLabel(obj.doneLabel, phase);
                        this.Update_title(obj.title, phase);
                        this.Update_sortLabel(obj.sortLabel, phase);
                        this.Update_filterLabel(obj.filterLabel, phase);
                        this.Update_filterBookAndChapter(obj.filterBookAndChapter, phase);
                        this.Update_filterBookId(obj.filterBookId, phase);
                        this.Update_chapterLabel(obj.chapterLabel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_chaptersList(obj.chaptersList, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_bookLabel(obj.bookLabel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_booksList(obj.booksList, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_bookAndChapterLabel(obj.bookAndChapterLabel, phase);
                        this.Update_unreadedLabel(obj.unreadedLabel, phase);
                        this.Update_filterUnreaded(obj.filterUnreaded, phase);
                        this.Update_favoritesLabel(obj.favoritesLabel, phase);
                        this.Update_filterFavorites(obj.filterFavorites, phase);
                        this.Update_descLabel(obj.descLabel, phase);
                        this.Update_sortMode(obj.sortMode, phase);
                        this.Update_ascLabel(obj.ascLabel, phase);
                        this.Update_sortByChapterLabel(obj.sortByChapterLabel, phase);
                        this.Update_sortType(obj.sortType, phase);
                        this.Update_sortByDateLabel(obj.sortByDateLabel, phase);
                    }
                }
            }
            private void Update_doneLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentDialog_PrimaryButtonText(this.obj1.Target as global::Windows.UI.Xaml.Controls.ContentDialog, obj, null);
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentDialog_Title(this.obj1.Target as global::Windows.UI.Xaml.Controls.ContentDialog, obj, null);
                }
            }
            private void Update_sortLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj2, obj, null);
                }
            }
            private void Update_filterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                }
            }
            private void Update_filterBookAndChapter(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("bookVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isFilteredBookAndChapter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_filterBookId(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("chapterVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_chapterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                }
            }
            private void Update_chaptersList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Chapter> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj12, obj, null);
                }
            }
            private void Update_bookLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                }
            }
            private void Update_booksList(global::System.Collections.ObjectModel.ObservableCollection<global::KnoWhy.Model.Books> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj14, obj, null);
                }
            }
            private void Update_bookAndChapterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                }
            }
            private void Update_unreadedLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_filterUnreaded(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isFilteredUnreaded").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_favoritesLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj19, obj, null);
                }
            }
            private void Update_filterFavorites(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isFilteredFavorites").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_descLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                }
            }
            private void Update_sortMode(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isSortedDesc").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj26, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isSortedAsc").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ascLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj25, obj, null);
                }
            }
            private void Update_sortByChapterLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj27, obj, null);
                }
            }
            private void Update_sortType(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj28, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isSortedByChapterAndVerse").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj30, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("isSortedByDate").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_sortByDateLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, obj, null);
                }
            }

            private class SortAndFilterDialog_obj1_BindingsTracking
            {
                global::System.WeakReference<SortAndFilterDialog_obj1_Bindings> WeakRefToBindingObj; 

                public SortAndFilterDialog_obj1_BindingsTracking(SortAndFilterDialog_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<SortAndFilterDialog_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SortAndFilterDialog_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::KnoWhy.UWP.SortAndFilterDialog obj = sender as global::KnoWhy.UWP.SortAndFilterDialog;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_doneLabel(obj.doneLabel, DATA_CHANGED);
                                    bindings.Update_title(obj.title, DATA_CHANGED);
                                    bindings.Update_sortLabel(obj.sortLabel, DATA_CHANGED);
                                    bindings.Update_filterLabel(obj.filterLabel, DATA_CHANGED);
                                    bindings.Update_filterBookAndChapter(obj.filterBookAndChapter, DATA_CHANGED);
                                    bindings.Update_filterBookId(obj.filterBookId, DATA_CHANGED);
                                    bindings.Update_chapterLabel(obj.chapterLabel, DATA_CHANGED);
                                    bindings.Update_bookLabel(obj.bookLabel, DATA_CHANGED);
                                    bindings.Update_bookAndChapterLabel(obj.bookAndChapterLabel, DATA_CHANGED);
                                    bindings.Update_unreadedLabel(obj.unreadedLabel, DATA_CHANGED);
                                    bindings.Update_filterUnreaded(obj.filterUnreaded, DATA_CHANGED);
                                    bindings.Update_favoritesLabel(obj.favoritesLabel, DATA_CHANGED);
                                    bindings.Update_filterFavorites(obj.filterFavorites, DATA_CHANGED);
                                    bindings.Update_descLabel(obj.descLabel, DATA_CHANGED);
                                    bindings.Update_sortMode(obj.sortMode, DATA_CHANGED);
                                    bindings.Update_ascLabel(obj.ascLabel, DATA_CHANGED);
                                    bindings.Update_sortByChapterLabel(obj.sortByChapterLabel, DATA_CHANGED);
                                    bindings.Update_sortType(obj.sortType, DATA_CHANGED);
                                    bindings.Update_sortByDateLabel(obj.sortByDateLabel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "doneLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_doneLabel(obj.doneLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_title(obj.title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortLabel(obj.sortLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterLabel(obj.filterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterBookAndChapter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterBookAndChapter(obj.filterBookAndChapter, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterBookId":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterBookId(obj.filterBookId, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "chapterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_chapterLabel(obj.chapterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bookLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_bookLabel(obj.bookLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bookAndChapterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_bookAndChapterLabel(obj.bookAndChapterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "unreadedLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_unreadedLabel(obj.unreadedLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterUnreaded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterUnreaded(obj.filterUnreaded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "favoritesLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_favoritesLabel(obj.favoritesLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "filterFavorites":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_filterFavorites(obj.filterFavorites, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "descLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_descLabel(obj.descLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortMode(obj.sortMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ascLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ascLabel(obj.ascLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortByChapterLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortByChapterLabel(obj.sortByChapterLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortType":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortType(obj.sortType, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "sortByDateLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_sortByDateLabel(obj.sortByDateLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::KnoWhy.UWP.SortAndFilterDialog obj)
                {
                    SortAndFilterDialog_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.ContentDialog element1 = (global::Windows.UI.Xaml.Controls.ContentDialog)(target);
                    #line 9 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.ContentDialog)element1).Loaded += this.ContentDialog_Loaded;
                    #line 11 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.ContentDialog)element1).PrimaryButtonClick += this.ContentDialog_PrimaryButtonClick;
                    #line default
                }
                break;
            case 3:
                {
                    this.buttonSortDate = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 52 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonSortDate).Click += this.buttonSortDate_Click;
                    #line default
                }
                break;
            case 4:
                {
                    this.buttonSortChapter = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 67 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonSortChapter).Click += this.buttonSortChapter_Click;
                    #line default
                }
                break;
            case 6:
                {
                    this.buttonFavorites = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 122 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonFavorites).Click += this.buttonFavorites_Click;
                    #line default
                }
                break;
            case 7:
                {
                    this.buttonUnreaded = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 139 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonUnreaded).Click += this.buttonUnreaded_Click;
                    #line default
                }
                break;
            case 8:
                {
                    this.buttonBookAndChapter = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 156 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonBookAndChapter).Click += this.buttonBookAndChapter_Click;
                    #line default
                }
                break;
            case 9:
                {
                    this.bookPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 10:
                {
                    this.chapterPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 12:
                {
                    this.comboChapters = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    #line 193 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.comboChapters).SelectionChanged += this.comboChapters_SelectionChanged;
                    #line default
                }
                break;
            case 14:
                {
                    this.comboBooks = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    #line 182 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.comboBooks).SelectionChanged += this.comboBooks_SelectionChanged;
                    #line default
                }
                break;
            case 21:
                {
                    this.buttonAsc = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 90 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonAsc).Click += this.buttonAsc_Click;
                    #line default
                }
                break;
            case 22:
                {
                    this.buttonDesc = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 105 "..\..\..\SortAndFilterDialog.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.buttonDesc).Click += this.buttonDesc_Click;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.ContentDialog element1 = (global::Windows.UI.Xaml.Controls.ContentDialog)target;
                    SortAndFilterDialog_obj1_Bindings bindings = new SortAndFilterDialog_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

