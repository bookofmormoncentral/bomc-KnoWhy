// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using Foundation;
using UIKit;

namespace KnoWhy.iOS.Base.lproj
{
	public partial class SettingsViewController : UIViewController
	{
		public SettingsViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.
            init();
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.
        }

        partial void tapDone(UIButton sender)
        {
            KnoWhy.Current.updateSettings();
            this.DismissViewController(true, () => {
                KnoWhy.Current.reorder();
            });
        }

        private void init() {

            this.Title = KnoWhy.Current.CONSTANT_SETTINGS_TITLE;
            this.NavigationItem.Title = KnoWhy.Current.CONSTANT_SETTINGS_TITLE;
            //this.NavigationController.NavigationItem.Title = KnoWhy.Current.CONSTANT_SETTINGS_TITLE;

            onlyWiFiSwitch.On = KnoWhy.Current.onlyWiFi;
            onlyWiFiLabel.Text = KnoWhy.Current.CONSTANT_AUTOMATIC_UPDATE;
            versionLabel.Text = KnoWhy.Current.CONSTANT_VERSION;
            versionValueLabel.Text = KnoWhy.VERSION;
            buildLabel.Text = KnoWhy.Current.CONSTANT_BUILD;
            buildValueLabel.Text = KnoWhy.BUILD_IOS;
            reset1Label.Text = KnoWhy.Current.CONSTANT_RESET_CONTENT;
            reset1DescLabel.Text = KnoWhy.Current.CONSTANT_RESET_CONTENT_LABEL;
            reset2Label.Text = KnoWhy.Current.CONSTANT_RESET_DATABASE;
            reset2DescLabel.Text = KnoWhy.Current.CONSTANT_RESET_DATABASE_LABEL;
        }

        partial void onlyWiFiChanged(UISwitch sender)
        {
            KnoWhy.Current.onlyWiFi = onlyWiFiSwitch.On;
        }

        private void callReset(bool mode)
        {
            this.DismissViewController(true, async () => await doReset(mode));
        }

        private async Task doReset(bool mode) {
            MainViewController mainViewController = (MainViewController)KnoWhy.Current.listInterface;
            if (mainViewController != null) {
                mainViewController.hideMenu();
            }
            
            await KnoWhy.Current.reset(mode);
        }

        partial void tapReset1(UITapGestureRecognizer sender)
        {
            //await KnoWhy.Current.reset(false);
            //Create Alert
            var alertController = UIAlertController.Create(KnoWhy.Current.CONSTANT_ALERT_RESET1_1, KnoWhy.Current.CONSTANT_ALERT_RESET1_2, UIAlertControllerStyle.Alert);
            alertController.AddAction(UIAlertAction.Create(KnoWhy.Current.CONSTANT_ALERT_RESET1_4, UIAlertActionStyle.Destructive, (obj) => {
                callReset(false);
            }));
            alertController.AddAction(UIAlertAction.Create(KnoWhy.Current.CONSTANT_ALERT_RESET1_3, UIAlertActionStyle.Default, null));


            // Present Alert
            PresentViewController(alertController, true, null);
        }

        partial void tapReset2(UITapGestureRecognizer sender)
        {
            //Create Alert
            var alertController = UIAlertController.Create(KnoWhy.Current.CONSTANT_ALERT_RESET2_1, KnoWhy.Current.CONSTANT_ALERT_RESET2_2, UIAlertControllerStyle.Alert);
            alertController.AddAction(UIAlertAction.Create(KnoWhy.Current.CONSTANT_ALERT_RESET2_4, UIAlertActionStyle.Destructive, (obj) => {
                callReset(true);
            }));
            alertController.AddAction(UIAlertAction.Create(KnoWhy.Current.CONSTANT_ALERT_RESET2_3, UIAlertActionStyle.Default, null));


            // Present Alert
            PresentViewController(alertController, true, null);
        }
	}
}
